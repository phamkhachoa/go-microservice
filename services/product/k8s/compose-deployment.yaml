---
# Deployment for your Golang application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-app
  labels:
    app: golang-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: golang-app
  template:
    metadata:
      labels:
        app: golang-app
    spec:
      containers:
        - name: product-service
          image: product-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 9090
              name: grpc
          env:
            - name: SERVICE_NAME
              value: "inventory-service"
            - name: MYSQL_HOST
              value: "mysql"
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_USERNAME
              value: "root"
            - name: MYSQL_PASSWORD
              value: "password"
            - name: MYSQL_DBNAME
              value: "product"
            - name: REDIS_HOST
              value: "root"
            - name: REDIS_PORT
              value: "password"
            - name: REDIS_PASSWORD
              value: "inventory"
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Service for your Golang application
apiVersion: v1
kind: Service
metadata:
  name: product-service
  labels:
    app.kubernetes.io/name: product-service
    app.kubernetes.io/instance: product
    app.kubernetes.io/component: product
    app.kubernetes.io/part-of: go-microservice
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80
      protocol: TCP
      name: http
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: product-app
---
# Ingress resource using the AWS ALB Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: go-microservice-ingress
  annotations:
    # Required: Specify the AWS Load Balancer Controller as the ingress.class
    kubernetes.io/ingress.class: alb

    # ALB Scheme: 'internet-facing' for public access, 'internal' for VPC-only access
    alb.ingress.kubernetes.io/scheme: internet-facing

    # Target Type: 'ip' is recommended for EKS to target individual pod IPs
    alb.ingress.kubernetes.io/target-type: ip

    # Listener Ports: Define the ports the ALB should listen on
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'

    # Optional: Redirect HTTP traffic to HTTPS
    alb.ingress.kubernetes.io/ssl-redirect: '443'

    # Optional: Health Check Configuration
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'

    # Optional: Tagging
    alb.ingress.kubernetes.io/tags: "Environment=dev,Team=platform,Application=golang-app"

    # Uncomment and replace with your certificate ARN for HTTPS
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account-id:certificate/certificate-id

    # Optional: Specify security groups (if not using the one from Terraform)
    # alb.ingress.kubernetes.io/security-groups: sg-xxxxxxxxxx

spec:
  rules:
    - http:
        paths:
          - path: /product*
            pathType: Prefix
            backend:
              service:
                name: product-service
                port:
                  number: 80

  # Optional: Default backend for requests that don't match any path
  # defaultBackend:
  #   service:
  #     name: default-service
  #     port:
  #       number: 80